/*
	Copyright 2021 Integritee AG and Supercomputing Systems AG

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

		http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/

enclave {
	from "sgx_backtrace.edl" import *;
	from "sgx_tstd.edl" import *;
	from "sgx_stdio.edl" import *;
	from "sgx_backtrace.edl" import *;
	from "sgx_tstdc.edl" import *;
	from "sgx_tprotected_fs.edl" import *;
	from "sgx_fs.edl" import *;
	from "sgx_net.edl" import *;
	from "sgx_time.edl" import *;
	from "sgx_env.edl" import *;
	from "sgx_thread.edl" import *;
	from "sgx_pipe.edl" import *;
	from "sgx_file.edl" import *;
	from "sgx_dcap_tvl.edl" import *;

	include "sgx_quote.h"
	include "sgx_report.h"
	include "sgx_ql_quote.h"
	include "sgx_qve_header.h"

	trusted {
		/* define ECALLs here. */
		public sgx_status_t init(
			[in, size=mu_ra_addr_size] uint8_t* mu_ra_addr, uint32_t mu_ra_addr_size,
			[in, size=untrusted_worker_addr_size] uint8_t* untrusted_worker_addr, uint32_t untrusted_worker_addr_size,
			[in, size=encoded_base_dir_size] uint8_t* encoded_base_dir_str, uint32_t encoded_base_dir_size
		);

		public sgx_status_t init_enclave_sidechain_components();

		public sgx_status_t init_direct_invocation_server(
			[in, size=server_addr_size] uint8_t* server_addr, uint32_t server_addr_size
		);

		public sgx_status_t init_parentchain_components(
			[in, size=params_size] uint8_t* params, size_t params_size,
			[out, size=latest_header_size] uint8_t* latest_header, size_t latest_header_size
		);

		public sgx_status_t init_shard(
			[in, size=shard_size] uint8_t* shard, uint32_t shard_size
		);

		public sgx_status_t trigger_parentchain_block_import(
			[in, size=parentchain_id_size] uint8_t* parentchain_id, uint32_t parentchain_id_size
		);

		public sgx_status_t execute_trusted_calls();

		public sgx_status_t sync_parentchain(
			[in, size=blocks_size] uint8_t* blocks, size_t blocks_size,
			[in, size=events_size] uint8_t* events, size_t events_size,
			[in, size=events_proofs_size] uint8_t* events_proofs, size_t events_proofs_size,
			[in, size=parentchain_id_size] uint8_t* parentchain_id, uint32_t parentchain_id_size
		);

		public sgx_status_t set_nonce(
			[in] uint32_t* nonce,
			[in, size=parentchain_id_size] uint8_t* parentchain_id, uint32_t parentchain_id_size
		);

		public sgx_status_t set_node_metadata(
			[in, size=node_metadata_size] uint8_t* node_metadata, uint32_t node_metadata_size,
			[in, size=parentchain_id_size] uint8_t* parentchain_id, uint32_t parentchain_id_size
		);

		public sgx_status_t get_rsa_encryption_pubkey(
			[out, size=pubkey_size] uint8_t* pubkey, uint32_t pubkey_size);

		public sgx_status_t get_ecc_signing_pubkey(
			[out, size=pubkey_size] uint8_t* pubkey, uint32_t pubkey_size);

		public sgx_status_t get_mrenclave(
			[out, size=mrenclave_size] uint8_t* mrenclave, uint32_t mrenclave_size);

		public sgx_status_t generate_ias_ra_extrinsic(
			[in, size=w_url_size] uint8_t* w_url, uint32_t w_url_size,
			[out, size=unchecked_extrinsic_size] uint8_t* unchecked_extrinsic, uint32_t unchecked_extrinsic_size,
			int skip_ra
		);
		public sgx_status_t generate_dcap_ra_quote(
			int skip_ra,
			[in] const sgx_target_info_t* quoting_enclave_target_info,
			uint32_t quote_size,
			[out, size=dcap_quote_size] uint8_t* dcap_quote_p, uint32_t dcap_quote_size
		);

		public sgx_status_t generate_dcap_ra_extrinsic_from_quote(
			[in, size=w_url_size] uint8_t* w_url, uint32_t w_url_size,
			[in, size=quote_size] uint8_t* quote, uint32_t quote_size,
			[out, size=unchecked_extrinsic_size] uint8_t* unchecked_extrinsic, uint32_t unchecked_extrinsic_size
		);

		public sgx_status_t generate_dcap_ra_extrinsic(
			[in, size=w_url_size] uint8_t* w_url, uint32_t w_url_size,
			[out, size=unchecked_extrinsic_size] uint8_t* unchecked_extrinsic, uint32_t unchecked_extrinsic_size,
			int skip_ra,
			[in] const sgx_target_info_t* quoting_enclave_target_info,
			[in] uint32_t* quote_size
		);

		public sgx_status_t generate_register_quoting_enclave_extrinsic(
		    [in] const sgx_ql_qve_collateral_t *p_quote_collateral,
			[out, size=unchecked_extrinsic_size] uint8_t* unchecked_extrinsic, uint32_t unchecked_extrinsic_size
		);

		public sgx_status_t generate_register_tcb_info_extrinsic(
		    [in] const sgx_ql_qve_collateral_t *p_quote_collateral,
			[out, size=unchecked_extrinsic_size] uint8_t* unchecked_extrinsic, uint32_t unchecked_extrinsic_size
		);

		public sgx_status_t update_market_data_xt(
			[in, size=crypto_currency_size] uint8_t* crypto_currency, uint32_t crypto_currency_size,
			[in, size=fiat_currency_size] uint8_t* fiat_currency, uint32_t fiat_currency_size,
			[out, size=unchecked_extrinsic_size] uint8_t* unchecked_extrinsic, uint32_t unchecked_extrinsic_size
		);

		public sgx_status_t update_weather_data_xt(
			[in, size=weather_info_logitude_size] uint8_t* weather_info_logitude, uint32_t weather_info_logitude_size,
			[in, size=weather_info_latitude_size] uint8_t* weather_info_latitude, uint32_t weather_info_latitude_size,
			[out, size=unchecked_extrinsic_size] uint8_t* unchecked_extrinsic, uint32_t unchecked_extrinsic_size
		);

		public sgx_status_t dump_ias_ra_cert_to_disk();

		public sgx_status_t dump_dcap_ra_cert_to_disk([in] const sgx_target_info_t* quoting_enclave_target_info, uint32_t quote_size);

		public sgx_status_t dump_dcap_collateral_to_disk([in] const sgx_ql_qve_collateral_t *p_quote_collateral);

		public sgx_status_t run_state_provisioning_server(
			int fd,
			sgx_quote_sign_type_t quote_type,
			[in] sgx_target_info_t* quoting_enclave_target_info,
			[in] uint32_t* quote_size,
			int skip_ra
		);
		public sgx_status_t request_state_provisioning(
			int fd,
			sgx_quote_sign_type_t quote_type,
			[in] sgx_target_info_t* quoting_enclave_target_info,
			[in] uint32_t* quote_size,
			[in, size=shard_size] uint8_t* shard, uint32_t shard_size,
			int skip_ra
		);

		public sgx_status_t call_rpc_methods(
			[in, size=request_len] uint8_t* request, uint32_t request_len,
			[out, size=response_len] uint8_t* response, uint32_t response_len
		);

		public size_t test_main_entrance();
	};

	untrusted {
		sgx_status_t ocall_sgx_init_quote(
			[out] sgx_target_info_t *ret_ti,
			[out] sgx_epid_group_id_t *ret_gid
		);

		sgx_status_t ocall_get_ias_socket([out] int *ret_fd);

		sgx_status_t ocall_get_quote(
			[in, size = sigrl_len] uint8_t * p_sigrl, uint32_t sigrl_len,
			[in] sgx_report_t *report, sgx_quote_sign_type_t quote_type,
			[in] sgx_spid_t *p_spid, [in] sgx_quote_nonce_t *p_nonce,
			[out] sgx_report_t *p_qe_report,
			[out, size = maxlen] sgx_quote_t *p_quote, uint32_t maxlen,
			[out] uint32_t* p_quote_len
		);

		sgx_status_t ocall_get_dcap_quote(
			[in] sgx_report_t *report,
			[out, size = quote_size] sgx_quote_t *p_quote, uint32_t quote_size
		);

		sgx_status_t ocall_get_qve_report_on_quote(
			[in, size = quote_size] const uint8_t * quote, uint32_t quote_size,
			time_t current_time,
			[in] const sgx_ql_qve_collateral_t *p_quote_collateral,
			[out] uint32_t *collateral_expiration_status,
			[out] sgx_ql_qv_result_t *quote_verification_result,
			[in, out] sgx_ql_qe_report_info_t *qve_report_info,
			[out, size=supplemental_data_size] uint8_t *p_supplemental_data,
			uint32_t supplemental_data_size
		);

		sgx_status_t ocall_get_update_info(
			[in] sgx_platform_info_t * platformBlob, int32_t enclaveTrusted,
			[out] sgx_update_info_bit_t * update_info
		);

		sgx_status_t ocall_read_ipfs(
			[in, size = cid_size] uint8_t * cid, uint32_t cid_size
		);

		sgx_status_t ocall_write_ipfs(
			[in, size = state_size] uint8_t * enc_state, uint32_t state_size,
			[out, size = cid_size] uint8_t * cid, uint32_t cid_size
		);

		sgx_status_t ocall_worker_request(
			[in, size = req_size] uint8_t * request, uint32_t req_size,
			[in, size=parentchain_id_size] uint8_t* parentchain_id, uint32_t parentchain_id_size,
			[out, size = resp_size] uint8_t * response, uint32_t resp_size
		);

		sgx_status_t ocall_update_metric(
			[in, size = metric_size] uint8_t * metric, uint32_t metric_size
		);

		sgx_status_t ocall_propose_sidechain_blocks(
			[in, size = signed_blocks_size] uint8_t * signed_blocks, uint32_t signed_blocks_size
		);

		sgx_status_t ocall_store_sidechain_blocks(
			[in, size = signed_blocks_size] uint8_t * signed_blocks, uint32_t signed_blocks_size
		);

		sgx_status_t ocall_fetch_sidechain_blocks_from_peer(
			[in, size = last_imported_block_hash_size] uint8_t * last_imported_block_hash, uint32_t last_imported_block_hash_size,
			[in, size = maybe_until_block_hash_size] uint8_t * maybe_until_block_hash, uint32_t maybe_until_block_hash_size,
			[in, size = shard_identifier_size] uint8_t * shard_identifier, uint32_t shard_identifier_size,
			[out, size = sidechain_blocks_size] uint8_t * sidechain_blocks, uint32_t sidechain_blocks_size
		);

		sgx_status_t ocall_send_to_parentchain(
			[in, size = extrinsics_size] uint8_t * extrinsics, uint32_t extrinsics_size,
			[in, size=parentchain_id_size] uint8_t* parentchain_id, uint32_t parentchain_id_size
		);
	};
};
