// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

enclave {

    include "sys/socket.h"
    include "poll.h"
    from "sgx_fs.edl" import *;
    from "sgx_time.edl" import *;
    from "sgx_mem.edl" import *;

    trusted {
        /* define ECALLs here. */
    };

    untrusted {

        int u_net_socket_ocall([out] int *error, int domain, int ty, int protocol) transition_using_threads;
        int u_net_socketpair_ocall([out] int *error, int domain, int ty, int protocol, [out] int sv[2]) transition_using_threads;
        int u_net_bind_ocall([out] int *error, int sockfd, [in, size=addrlen] const struct sockaddr *addr, socklen_t addrlen) transition_using_threads;
        int u_net_listen_ocall([out] int *error, int sockfd, int backlog) transition_using_threads;
        int u_net_accept4_ocall([out] int *error,
                                int sockfd,
                                [in, out, size=addrlen_in] struct sockaddr *addr,
                                socklen_t addrlen_in,
                                [out] socklen_t *addrlen_out,
                                int flags) transition_using_threads;
        int u_net_connect_ocall([out] int *error,
                                int sockfd,
                                [in, size=addrlen] const struct sockaddr *addr,
                                socklen_t addrlen) transition_using_threads;
        size_t u_net_recv_ocall([out] int *error, int sockfd, [out, size=len] void *buf, size_t len, int flags) transition_using_threads;
        size_t u_net_recvfrom_ocall([out] int *error,
                                    int sockfd,
                                    [out, size=len] void *buf,
                                    size_t len,
                                    int flags,
                                    [out, size=addrlen_in] struct sockaddr *src_addr,
                                    socklen_t addrlen_in,
                                    [out] socklen_t *addrlen_out) transition_using_threads;
        size_t u_net_recvmsg_ocall([out] int *error, int sockfd, [in, out] struct msghdr *msg, int flags) transition_using_threads;
        size_t u_net_send_ocall([out] int *error, int sockfd, [in, size=len] const void *buf, size_t len, int flags) transition_using_threads;
        size_t u_net_sendto_ocall([out] int *error,
                                  int sockfd,
                                  [in, size=len] const void *buf,
                                  size_t len,
                                  int flags,
                                  [in, size=addrlen] const struct sockaddr *dest_addr,
                                  socklen_t addrlen) transition_using_threads;
        size_t u_sendmsg_ocall([out] int *error, int sockfd, [in] const struct msghdr *msg, int flags) transition_using_threads;
        int u_net_getsockopt_ocall([out] int *error,
                                   int sockfd,
                                   int level,
                                   int optname,
                                   [out, size=optlen_in] void *optval,
                                   socklen_t optlen_in,
                                   [out] socklen_t *optlen_out) transition_using_threads;
        int u_net_setsockopt_ocall([out] int *error,
                                   int sockfd,
                                   int level,
                                   int optname,
                                   [in, size=optlen] const void *optval,
                                   socklen_t optlen) transition_using_threads;
        int u_net_getsockname_ocall([out] int *error,
                                    int sockfd,
                                    [out, size=addrlen_in] struct sockaddr *addr,
                                    socklen_t addrlen_in,
                                    [out] socklen_t *addrlen_out) transition_using_threads;
        int u_net_getpeername_ocall([out] int *error,
                                    int sockfd,
                                    [out, size=addrlen_in] struct sockaddr *addr,
                                    socklen_t addrlen_in,
                                    [out] socklen_t *addrlen_out) transition_using_threads;
        int u_net_shutdown_ocall([out] int *error, int sockfd, int how) transition_using_threads;
        int u_net_ioctl_ocall([out] int *error, int fd, int request, [in, out] int *arg) transition_using_threads;
        int u_net_poll_ocall([out] int *error, [in, out, count=nfds] struct pollfd *fds, nfds_t nfds, int timeout) transition_using_threads;
    };
};
