// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

enclave {

    include "sys/socket.h"

    from "sgx_mem.edl" import *;

    trusted {
        /* define ECALLs here. */
    };

    untrusted {
        int u_socket_ocall([out] int *error, int domain, int ty, int protocol);
        int u_socketpair_ocall([out] int *error, int domain, int ty, int protocol, [out] int sv[2]);
        int u_bind_ocall([out] int *error, int sockfd, [in, size=addrlen] const struct sockaddr *addr, socklen_t addrlen);
        int u_listen_ocall([out] int *error, int sockfd, int backlog);
        int u_accept_ocall([out] int *error,
                           int sockfd,
                           [in, out, size=addrlen_in] struct sockaddr *addr,
                           socklen_t addrlen_in,
                           [out] socklen_t *addrlen_out);
        int u_accept4_ocall([out] int *error,
                            int sockfd,
                            [in, out, size=addrlen_in] struct sockaddr *addr,
                            socklen_t addrlen_in,
                            [out] socklen_t *addrlen_out,
                            int flags);
        int u_connect_ocall([out] int *error,
                            int sockfd,
                            [in, size=addrlen] const struct sockaddr *addr,
                            socklen_t addrlen);
        size_t u_recv_ocall([out] int *error, int sockfd,[user_check] void *buf, size_t len, int flags);
        size_t u_recvfrom_ocall([out] int *error,
                                int sockfd,
                                [user_check] void *buf,
                                size_t len,
                                int flags,
                                [out, size=addrlen_in] struct sockaddr *src_addr,
                                socklen_t addrlen_in,
                                [out] socklen_t *addrlen_out);
        size_t u_recvmsg_ocall([out] int *error,
                               int sockfd,
                               [out, size=msg_namelen] void *msg_name,
                               socklen_t msg_namelen,
                               [out] socklen_t* msg_namelen_out,
                               [in, count=msg_iovlen] struct iovec* msg_iov,
                               size_t msg_iovlen,
                               [out, size=msg_controllen] void *msg_control,
                               size_t msg_controllen,
                               [out] size_t* msg_controllen_out,
                               [out] int* msg_flags,
                               int flags);
        size_t u_send_ocall([out] int *error, int sockfd, [user_check] const void *buf, size_t len, int flags);
        size_t u_sendto_ocall([out] int *error,
                              int sockfd,
                              [user_check] const void *buf,
                              size_t len,
                              int flags,
                              [in, size=addrlen] const struct sockaddr *dest_addr,
                              socklen_t addrlen);
        size_t u_sendmsg_ocall([out] int *error,
                               int sockfd,
                               [in, size=msg_namelen] const void* msg_name,
                               socklen_t msg_namelen,
                               [in, count=msg_iovlen] const struct iovec* msg_iov,
                               size_t msg_iovlen,
                               [in, size=msg_controllen] const void* msg_control,
                               size_t msg_controllen,
                               int flags);
        int u_getsockopt_ocall([out] int *error,
                               int sockfd,
                               int level,
                               int optname,
                               [out, size=optlen_in] void *optval,
                               socklen_t optlen_in,
                               [out] socklen_t *optlen_out);
        int u_setsockopt_ocall([out] int *error,
                               int sockfd,
                               int level,
                               int optname,
                               [in, size=optlen] const void *optval,
                               socklen_t optlen);
        int u_getsockname_ocall([out] int *error,
                                int sockfd,
                                [out, size=addrlen_in] struct sockaddr *addr,
                                socklen_t addrlen_in,
                                [out] socklen_t *addrlen_out);
        int u_getpeername_ocall([out] int *error,
                                int sockfd,
                                [out, size=addrlen_in] struct sockaddr *addr,
                                socklen_t addrlen_in,
                                [out] socklen_t *addrlen_out);
        int u_shutdown_ocall([out] int *error, int sockfd, int how);
    };
};
